package cn.banyingli.greendaodemo.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import cn.banyingli.greendaodemo.db.Concert;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CONCERT.
*/
public class ConcertDao extends AbstractDao<Concert, Void> {

    public static final String TABLENAME = "CONCERT";

    /**
     * Properties of entity Concert.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Concert_no = new Property(1, Long.class, "concert_no", true, "CONCERT_NO");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Venue = new Property(3, String.class, "venue", false, "VENUE");
    };


    public ConcertDao(DaoConfig config) {
        super(config);
    }
    
    public ConcertDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CONCERT' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'CONCERT_NO' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 1: concert_no
                "'TITLE' TEXT NOT NULL ," + // 2: title
                "'VENUE' TEXT);"); // 3: venue
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CONCERT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Concert entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long concert_no = entity.getConcert_no();
        if (concert_no != null) {
            stmt.bindLong(2, concert_no);
        }
        stmt.bindString(3, entity.getTitle());
 
        String venue = entity.getVenue();
        if (venue != null) {
            stmt.bindString(4, venue);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Concert readEntity(Cursor cursor, int offset) {
        Concert entity = new Concert( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // concert_no
            cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // venue
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Concert entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setConcert_no(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setTitle(cursor.getString(offset + 2));
        entity.setVenue(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Concert entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Concert entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
